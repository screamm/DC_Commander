[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "dc-commander"
version = "0.2.0"
description = "A modern Norton Commander-style TUI file manager built with Python and Textual"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "DC Commander Contributors"}
]
keywords = ["file-manager", "tui", "norton-commander", "textual", "terminal"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Desktop Environment :: File Managers",
    "Topic :: System :: Filesystems",
    "Topic :: Terminals",
    "Typing :: Typed",
]

dependencies = [
    "textual>=0.50.0",
    "rich>=13.7.0",
    "psutil>=5.9.0",
    "aiofiles>=23.1.0",
    "windows-curses>=2.3.0; platform_system=='Windows'",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",  # Parallel test execution
    "hypothesis>=6.92.0",    # Property-based testing
    "coverage[toml]>=7.3.0",

    # Type Checking
    "mypy>=1.7.0",
    "types-aiofiles",
    "types-psutil",

    # Code Quality
    "ruff>=0.1.8",           # Fast linter/formatter (replaces black, isort, flake8)
    "black>=23.12.0",        # Alternative formatter
    "isort>=5.13.0",         # Import sorting
    "pylint>=3.0.0",         # Advanced linting

    # Security
    "bandit>=1.7.5",         # Security linting
    "safety>=2.3.5",         # Dependency vulnerability scanning

    # Documentation
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=2.0.0",
    "sphinx-autodoc-typehints>=1.25.0",

    # Build & Release
    "build>=1.0.3",
    "twine>=4.0.2",
    "bump2version>=1.0.1",

    # Pre-commit
    "pre-commit>=3.6.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/dc-commander"
Documentation = "https://github.com/yourusername/dc-commander/wiki"
Repository = "https://github.com/yourusername/dc-commander.git"
Issues = "https://github.com/yourusername/dc-commander/issues"

[project.scripts]
dc-commander = "modern_commander:main"

# ============================================================================
# RUFF - Fast Python Linter & Formatter
# https://docs.astral.sh/ruff/
# ============================================================================

[tool.ruff]
target-version = "py310"
line-length = 100
indent-width = 4

# Enable additional rules
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "YTT",    # flake8-2020
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit (security)
    "BLE",    # flake8-blind-except
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "PL",     # pylint
    "TRY",    # tryceratops
    "RUF",    # ruff-specific rules
]

ignore = [
    "E501",    # Line too long (handled by formatter)
    "S101",    # Use of assert (OK in tests)
    "PLR0913", # Too many arguments
    "TRY003",  # Avoid specifying long messages outside exception class
]

# Exclude directories
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "venv",
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # Allow asserts in tests
    "PLR2004", # Allow magic values in tests
    "ARG",     # Allow unused arguments in test fixtures
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# ============================================================================
# BLACK - Python Code Formatter (alternative to ruff format)
# https://black.readthedocs.io/
# ============================================================================

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.ruff_cache
  | \.venv
  | build
  | dist
  | venv
)/
'''

# ============================================================================
# ISORT - Import Sorting (integrated into ruff)
# https://pycqa.github.io/isort/
# ============================================================================

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true

# ============================================================================
# MYPY - Static Type Checker
# https://mypy.readthedocs.io/
# ============================================================================

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
strict_equality = true
check_untyped_defs = true
disallow_untyped_defs = false  # Start false, gradually enable
disallow_incomplete_defs = false
disallow_untyped_calls = false
disallow_any_generics = false
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Gradually increase strictness
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
check_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "textual.*",
    "rich.*",
    "psutil.*",
]
ignore_missing_imports = true

# ============================================================================
# PYTEST - Testing Framework
# https://docs.pytest.org/
# ============================================================================

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov=components",
    "--cov=features",
    "--cov=services",
    "--cov=patterns",
    "--cov-report=html",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=xml",
    "--cov-fail-under=80",  # Target: 80% coverage
    "-ra",                  # Show summary of all test outcomes
    "--tb=short",           # Shorter traceback format
    "-v",                   # Verbose output
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
    "performance: marks tests as performance benchmarks",
    "ui: marks tests as UI interaction tests",
    "security: marks tests as security validation tests",
]
asyncio_mode = "auto"

# ============================================================================
# COVERAGE - Code Coverage Measurement
# https://coverage.readthedocs.io/
# ============================================================================

[tool.coverage.run]
source = ["src", "components", "features", "services", "patterns", "repositories", "models"]
branch = true
parallel = true
omit = [
    "tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/conftest.py",
    "setup.py",
    "run.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# ============================================================================
# PYLINT - Advanced Python Linter
# https://pylint.readthedocs.io/
# ============================================================================

[tool.pylint.messages_control]
disable = [
    "C0111",  # Missing docstring
    "C0103",  # Invalid name
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0212",  # Access to protected member
]

[tool.pylint.format]
max-line-length = 100

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_", "fs", "id", "x", "y"]

# ============================================================================
# BANDIT - Security Linter
# https://bandit.readthedocs.io/
# ============================================================================

[tool.bandit]
exclude_dirs = ["tests", "test_*.py"]
skips = ["B101"]  # Allow assert in tests

# ============================================================================
# SETUPTOOLS - Package Building
# https://setuptools.pypa.io/
# ============================================================================

[tool.setuptools]
packages = ["src", "components", "features", "services", "patterns", "repositories", "models"]

[tool.setuptools.package-data]
"*" = ["*.css", "*.tcss", "*.md"]

# ============================================================================
# BUMP2VERSION - Version Management
# https://github.com/c4urself/bump2version
# ============================================================================

[tool.bumpversion]
current_version = "0.2.0"
commit = true
tag = true
message = "Bump version: {current_version} → {new_version}"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
filename = "modern_commander.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'
